#+TITLE: Emacs init file written in org-mode
#+AUTHOR: Julio Toss
#+EMAIL: julio.toss@imag.fr
#+STARTUP: indent logdrawer
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS: author:nil email:nil creator:nil timestamp:nil
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

#+LANGUAGE: en
#+TAGS: JULIO(J) noexport(n)

This file is my =.emacs= configuration file (more precisely my
=~/.emacs.d/init.el= configuration). I stole it from Luka Stanisic who
stole parts from mine a long time ago and cleaned (with org-mode) and
improved everything. It is so convenient that I think it is time to
share it. Note that it comprises my personal website publishing
configuration that you should not really need but that you can inspire
on.

To have a nice emacs configuration, you'll need:
- emacs24 (>24.3) (this way installing through elpa will save you some
  time) and emacs-goodies (e.g., for color themes)
- org-mode > 8.2 (there has been a major compatibility breakage so
  need to stay away from old versions)
- ess and R
- texlive and auctex
If you're a Mac OS X user, [[../blog/2014/05/15/emacs_and_orgmode_on_macosx.org][read this]].

other exaple of configurations: https://carlhu.com/orgmode

I took the original version of this file at http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php

* Installation Instructions
Then copy it into =~/.emacs.d/init.org=. 

- *If you are using Mac OS X, remove every line containing the word
  =xclip= in this file* (you may also be interested in reading [[file:../blog/2014/05/15/emacs_and_orgmode_on_macosx.org][this blog entry]]).
- Otherwise, you should consider installing xclip (=sudo apt-get
    install xclip= in a shell and =M-x package-install= the =xclip= package
  within emacs) as it will ease interactions with emacs when running
  in a terminal.

Then do =M-x org-babel-load-file= (=M-x= means pressing =Alt= and =x=
simultaneously to get the emacs prompt that allows you to call emacs
functions, also remember you can press =Tab= to activate auto
completion) and provide =~/.emacs.d/init.org=. This should evaluate
every piece of emacs-lisp code available here.

Next time, simply reload changes with "C-c i". If some stuff does not
work (in particular in the org-mode website generation section or in
the tabs section), just comment them and proceeed.

* Hack to customize the configuration file                           :JULIO:

- [X] Discover why this block is not beeing tangled.  
  This was because of the PROPERTY block in the BEGIN_EXAMPLE drawer was
  actually taken into account.

We hack into the internal archiving function so it disables the
tangling in acrhived tree. This way we can enable and disable headings
by using =C-c C-x a= . 

The code block bellow adds the following property in archived trees:
#+BEGIN_EXAMPLE 
  :header-args:    :tangle no
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(require 'org)
(eval-after-load "org-archive"
  '(defun org-toggle-archive-tag (&optional find-done)
    "Toggle the archive tag for the current headline.
  With prefix ARG, check all children of current headline and offer tagging
  the children that do not contain any open TODO items."
    (interactive "P")
    (if (and (org-region-active-p) org-loop-over-headlines-in-active-region)
        (let ((cl (if (eq org-loop-over-headlines-in-active-region 'start-level)
                      'region-start-level 'region))
              org-loop-over-headlines-in-active-region)
          (org-map-entries
           `(org-toggle-archive-tag ,find-done)
           org-loop-over-headlines-in-active-region
           cl (if (outline-invisible-p) (org-end-of-subtree nil t))))
      (if find-done
          (org-archive-all-done 'tag)
        (let (set)
          (save-excursion
            (org-back-to-heading t)
            (setq set (org-toggle-tag org-archive-tag))
            (when set (hide-subtree)))
          (if (org-entry-get (point) "header-args")  
              (org-delete-property "header-args" )
            (org-set-property
             "header-args"
             ":tangle no"))      
          (and set (beginning-of-line 1))
          (message "Subtree %s" (if set "archived" "unarchived"))))))
)
#+END_SRC

#+RESULTS:
: org-toggle-archive-tag

* Loading files:
** ELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)
(setq package-archives
'( ;("ELPA" . "http://tromey.com/elpa/")
   ("gnu" . "http://elpa.gnu.org/packages/")
   ("melpa" . "http://melpa.org/packages/")
   ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC
** Adding .el files stored in folder elisp:                    :WEB:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/lib/elisp/")
(add-to-list 'load-path "~/.emacs.d/elpa/org-20150302/")
(add-to-list 'load-path "~/.emacs.d/elpa/xclip-1.3/")
(add-to-list 'load-path "~/.emacs.d/elpa/htmlize-20130207.1202/")
(add-to-list 'load-path "~/.emacs.d/elpa/polymode-20151013.814/")
(add-to-list 'load-path "~/.emacs.d/elpa/lua-mode-20150518.942/")
(add-to-list 'load-path "~/.emacs.d/elpa/toc-org-20150801.748/")
;;(require 'org-git-link) ;; Made some personal modifications
#+END_SRC
[10:42:15; 24.06.2013]
** Loading babel:                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
(require 'org-install)
(require 'org)
;; (require 'org-html)
#+END_SRC
[17:28:05; 30.05.2013]
** Font lock                                                   :WEB:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:ORDERED:  t
:END:
Useful if you want to export org files in batch mode...
#+BEGIN_SRC emacs-lisp
(require 'font-lock)      
(require 'cc-mode) 
(c-after-font-lock-init)
#+END_SRC
** File/mode association                                            :ARNAUD:
:PROPERTIES:
:END:
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist
   (append (mapcar 'purecopy
      '(("\\.c$"   . c-mode)
	("\\.h$"   . c-mode)
	("\\.c.simp$" . c-mode)
	("\\.h.simp$" . c-mode)
	("\\.a$"   . c-mode)
	("\\.w$"   . cweb-mode)
	("\\.cc$"   . c++-mode)
	("\\.S$"   . asm-mode)
	("\\.s$"   . asm-mode)
	("\\.p$"   . pascal-mode)
	("\\.Rmd$" . poly-markdown-mode)
	("\\.pas$" . pascal-mode)
	("\\.tex$" . LaTeX-mode)
	("\\.txi$" . Texinfo-mode)
	("\\.el$"  . emacs-lisp-mode)
;;	("emacs"  . emacs-lisp-mode)
	("\\.ml[iylp]?" . tuareg-mode)
	("[mM]akefile" . makefile-mode)
	("[mM]akefile.*" . makefile-mode)
	("\\.mak" . makefile-mode)
	("\\.cshrc" . sh-mode)
	("\\.html$" . html-mode)
        ("\\.org$" . org-mode)
        ("\\.md$" . markdown-mode)
)) auto-mode-alist))
#+END_SRC
* Emacs aesthetics:
** Remove splash screen:                                                :WEB:
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC
[16:29:14; 24.04.2013]
** Keep the list of recent files                                      :JULIO:
Bug with tramp and recent files:
https://www.emacswiki.org/emacs/RecentFiles#toc9
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC
** Change frame name of emacs:                                     :LUKA:WEB:
#+BEGIN_SRC emacs-lisp
(setq frame-title-format
  '("Emacs - " (buffer-file-name "%f"
    (dired-directory dired-directory "%b"))))
#+END_SRC
[16:29:40; 24.04.2013]
** Font size                                                :ARNAUD:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(set-default-font "9x15")
#+END_SRC
** Text coloring                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
  (custom-set-faces
    '(flyspell-incorrect ((t (:inverse-video t)))))
  ;;  (set-face-attribute 'flyspell-incorrect (t (:inverse-video t)))
#+END_SRC
** Line and column numbering                                        :ARNAUD:
#+BEGIN_SRC emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+END_SRC
** Parenthesis                                                       :ARNAUD:
#+BEGIN_SRC emacs-lisp
(load-library "paren")
(show-paren-mode 1)
(transient-mark-mode t)
(require 'paren)
#+END_SRC
** Confirmation to exit emacs                                        :JULIO:
#+BEGIN_SRC emacs-lisp
(add-hook 'kill-emacs-query-functions
          (lambda () (y-or-n-p "Do you really want to exit Emacs? "))
          'append)
#+END_SRC
** Disable touch-pad on emacs                                :JULIO:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
[17:58:54; 24.01.2016]

https://www.reddit.com/r/emacs/comments/38o0tr/i_have_to_share_this_switch_your_touchpad_off/


This only make sense if you have a touchpad. Otherwise you'll get an
error message like:
: Couldn't find synaptics properties. No synaptics driver loaded?

#+begin_src emacs-lisp
(defun turn-off-mouse (&optional frame)
  (interactive)
  (let ((inhibit-message t) (default-directory "~"))
    (shell-command "synclient TouchpadOff=1")))

(defun turn-on-mouse (&optional frame)
  (interactive)
  (let ((inhibit-message t) (default-directory "~"))
    (shell-command "synclient TouchpadOff=0")))

(add-hook 'focus-in-hook #'turn-off-mouse)
(add-hook 'focus-out-hook #'turn-on-mouse)
(add-hook 'delete-frame-functions #'turn-on-mouse)
#+end_src

#+RESULTS:
| turn-on-mouse |

** Swap buffers in windows                                          :JULIO:
<2016-02-09 mar.>
http://stackoverflow.com/a/1774949
#+begin_src emacs-lisp
(defun swap-buffers-in-windows ()
  "Put the buffer from the selected window in next window, and vice versa"
  (interactive)
  (let* ((this (selected-window))
     (other (next-window))
     (this-buffer (window-buffer this))
     (other-buffer (window-buffer other)))
    (set-window-buffer other this-buffer)
    (set-window-buffer this other-buffer)
    )
  )
#+end_src

#+RESULTS:
: swap-buffers-in-windows

Set a shortcut for this function
#+begin_src emacs-lisp
(global-set-key (kbd "C-x 4 t") 'swap-buffers-in-windows) 
#+end_src

#+RESULTS:
: swap-buffers-in-windows

** Evilmode                                                          :JULIO:
Emulates the Vim commands in emacs
#+begin_src emacs-lisp
(setq evil-want-C-i-jump nil)
(require 'evil)
(evil-mode 1)
#+end_src

** Save Emacs session on exit                                        :JULIO:
#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src

** Start Emacs as server for use emacsclient                         :JULIO:
https://anxiousmofo.wordpress.com/2008/08/04/opening-files-in-an-already-running-instance-of-emacs/
#+begin_src emacs-lisp
(server-start)
#+end_src

* Shortcuts:
:PROPERTIES:
:END:
** Load emacs initialization file:                                     :LUKA:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 
(lambda() (interactive)(org-babel-load-file "~/.emacs.d/init.org")))
#+END_SRC
[16:28:10; 24.04.2013]
** UTF 8 by default                                                  :ARNAUD:
#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
** Keyboard fix for Mac OS X users...                       :ADRIEN:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
Thanks to Adrien Lebre for providing me with this
=ns-use-mac-modifier-symbols= thing. Unfortunately, this is broken at
the moment (I tried to wrap the command around the cond but it should
fail on mac). 
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "darwin")   ; Mac OS X
  (progn
    (setq
     ns-command-modifier 'meta         ; Apple/Command key is Meta
	 ns-alternate-modifier nil         ; Option is the Mac Option key
	 ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols
	 ))
  )
 )
#+END_SRC
** CUA mode a.k.a =C-x, C-c, C-v=                                  :ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
Yuck! Many people like this but I hate it as it conflicts with some of
my other shortcuts (e.g., the ones for spelling a region).
#+BEGIN_SRC emacs-lisp
;; (cua-mode t)
#+END_SRC
** Hide/show the C block:                                          :LUKA:WEB:
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
  (lambda()
    (local-set-key (kbd "C-c <right>") 'hs-show-block)
    (local-set-key (kbd "C-c <left>")  'hs-hide-block)
    (local-set-key (kbd "C-c <up>")    'hs-hide-all)
    (local-set-key (kbd "C-c <down>")  'hs-show-all)
    (hs-minor-mode t)))
#+END_SRC
[16:32:57; 24.04.2013]

** Reload buffer:                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
(global-set-key [f10] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC
[16:34:57; 24.04.2013]
** Compile / Make
#+BEGIN_SRC emacs-lisp
(global-set-key "\^x\^e" 'compile)
#+END_SRC
** Navigate back in text                                             :ARNAUD:
#+BEGIN_SRC emacs-lisp
(defun jump-mark ()
  (interactive)
  (set-mark-command (point)))
(defun beginning-of-defun-and-mark ()
  (interactive)
  (push-mark (point))
  (beginning-of-defun))
(defun end-of-defun-and-mark ()
  (interactive)
  (push-mark (point))
  (end-of-defun))

(global-set-key "\^c\^b" 'beginning-of-defun-and-mark)
(global-set-key "\^c\^e" 'end-of-defun-and-mark)
(global-set-key "\^c\^j" 'jump-mark)
(global-set-key [S-f6] 'jump-mark)		;; jump from mark to mark
#+END_SRC
** Goto line                                                         :ARNAUD:
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-g" 'goto-line)
#+END_SRC
** Use X clipboard (cut'n paste)                                        :WEB:
Since I switched to emacs 24, cutting and pasting to emacs has
become burdensome. For example, I had to do S-C-c after selecting
terminals areas before being able to copy in emacs. With the
following commants, I don't have to do this anymore. I wish it
would have eased interactions when running emacs in a terminal
(i.e., with =-nw=) but it does not. :( [[http://stackoverflow.com/questions/13036155/how-to-to-combine-emacs-primary-clipboard-copy-and-paste-behavior-on-ms-windows]]
#+BEGIN_SRC emacs-lisp
(setq select-active-regions nil)
(setq x-select-enable-primary t)
(setq x-select-enable-clipboard t)
(setq mouse-drag-copy-region t)
#+END_SRC
** Cut'n paste in no-window mode                                        :WEB:
Despite what can be found in many old discussions on emacs mailing
lists, it seems to be possible and the trick is to use xclip!
[[http://stackoverflow.com/questions/4580835/emacs-copy-kill-ring-to-system-clipboard-in-nowindow-mode]]   [[http://stackoverflow.com/questions/5288213/how-can-i-paste-the-selected-region-outside-of-emacs/14659015#14659015]]

If you simply use the following commands, then emacs cut-n-paste works
just perfectly with the X clipboard. I can select in emacs no window
and then paste with the middle-click button! :) Many thanks to Vijay
for pointing me out that I had forgotten the "require" line... :)
#+BEGIN_SRC emacs-lisp
;;  (if(string-equal system-type "gnu/linux")   ; Linux!
;;      (
       (require (quote xclip))
       (xclip-mode 1)
;;      )()
;;        )
#+END_SRC
** Increase/decrease text size in emacs                                 :WEB:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+END_SRC
[11:26:47; 18.04.2014]
** Add spell checker to the file                                       :WEB:
:PROPERTIES:
:END:
#+BEGIN_SRC emacs-lisp
;; Inspired from http://tex.stackexchange.com/questions/166681/changing-language-of-flyspell-emacs-with-a-shortcut
;; (defun spell (choice)
;;    "Switch between language dictionaries."
;;    (interactive "cChoose:  (a) American | (f) Francais")
;;     (cond ((eq choice ?1)
;;            (setq flyspell-default-dictionary "american")
;;            (setq ispell-dictionary "american")
;;            (ispell-kill-ispell))
;;           ((eq choice ?2)
;;            (setq flyspell-default-dictionary "francais")
;;            (setq ispell-dictionary "francais")
;;            (ispell-kill-ispell))
;;           (t (message "No changes have been made."))) )

(define-key global-map (kbd "C-c s a") (lambda () (interactive) (ispell-change-dictionary "american")))
(define-key global-map (kbd "C-c s f") (lambda () (interactive) (ispell-change-dictionary "francais")))
(define-key global-map (kbd "C-c s r") 'flyspell-region)
(define-key global-map (kbd "C-c s b") 'flyspell-buffer)
(define-key global-map (kbd "C-c s s") 'flyspell-mode)
#+END_SRC
* Small fixes:
** PDF with LaTeX by default                                         :ARNAUD:
#+BEGIN_SRC emacs-lisp
(defun auto-fill-mode-on () (TeX-PDF-mode 1))
(add-hook 'tex-mode-hook 'TeX-PDF-mode-on)
(add-hook 'latex-mode-hook 'TeX-PDF-mode-on)
(setq TeX-PDF-mode t)
#+END_SRC
** Auto-fill-mode
#+BEGIN_SRC emacs-lisp
(defun auto-fill-mode-on () (auto-fill-mode 1))
(add-hook 'text-mode-hook 'auto-fill-mode-on)
(add-hook 'emacs-lisp-mode 'auto-fill-mode-on)
(add-hook 'tex-mode-hook 'auto-fill-mode-on)
(add-hook 'latex-mode-hook 'auto-fill-mode-on)
#+END_SRC
** C coding style                                                       :WEB:
From [[http://www.emacswiki.org/emacs/IndentingC]].
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "k&r")
  (setq c-basic-offset 2)
#+END_SRC
** Convenient shortcut to reindent C files                         :ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
 (defun c-reformat-buffer()
    (interactive)
    (save-buffer)
    (setq sh-indent-command (concat
                             "indent -i2 -kr --no-tabs"
                             buffer-file-name
                             )
          )
    (mark-whole-buffer)
    (universal-argument)
    (shell-command-on-region
     (point-min)
     (point-max)
     sh-indent-command
     (buffer-name)
     )
    (save-buffer)
    )
  (define-key c-mode-base-map [f7] 'c-reformat-buffer)
#+END_SRC
** Asking for confirmation concisely:                                   :WEB:
Link: [[http://org.ryuslash.org/dotfiles/emacs/init.html#sec-7-1]] Being
asked to type in yes explicitly all the time gets very tedious. I
understand that it is safer since y is much easier to type in
accidentally than yes and so the potential to say yes to things you
don't want is there, but I haven't had any such problems yet.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
[16:27:20; 24.04.2013]
** Fix problem of using dead-keys                                    :JULIO:
:PROPERTIES:
:END:
#+begin_src emacs-lisp
  (require 'iso-transl)
#+end_src

* Org-mode convenient configuration
** Default directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC
** Cosmetics
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
(setq org-alphabetical-lists t)
(setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
(setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
(setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
(setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html
(setq org-startup-indented t)      ;; turn on org-indent-mode for all files
(setq org-log-into-drawer t)       ;; insert notes into :LOGBOOK: drawer 
;;(setq org-cycle-include-plain-lists 'integrate) ;; fold plain list when cycling heading visibility
(setq org-cycle-include-plain-lists (quote integrate))
#+END_SRC

** Agenda
*** Add short cut keys for the org-agenda                            :ARNAUD:
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map (kbd "C-c a") 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-default-notes-file "~/org/notes.org")
     (define-key global-map "\C-cd" 'org-capture)
(setq org-capture-templates (quote (("t" "Todo" entry (file+headline "~/org/liste.org" "Tasks") "* TODO %?
  %i
  %a" :prepend t) ("j" "Journal" entry (file+datetree "~/org/journal.org") "* %?
Entered on %U
  %i
  %a"))))
#+END_SRC

*** Agenda config                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
(setq org-agenda-include-all-todo t)
(setq org-agenda-include-diary t)
;;displays the agenda starting today
;;(setq org-agenda-start-on-weekday nil)
;;displays the agenda starting today
(setq org-agenda-start-on-weekday 1)

(setq org-agenda-skip-scheduled-if-done t)

(setq org-agenda-sorting-strategy (quote 
((agenda habit-down time-up priority-down category-keep) (todo category-up priority-down) (tags priority-down category-keep) (search category-keep))))
#+END_SRC

**** Default org-agenda-files

#+begin_src emacs-lisp
(setq org-agenda-files (quote (
"~/Copy/Doutorado/activity-log.org"
"~/Copy/julio-personal.org"
)))
#+end_src

**** Extra files to add to the agenda
These files are the org files of the projects that I am currently 
working on. 

#+begin_src emacs-lisp
; Adds new file to track on the agenda
(push "~/Projects/hppsimulations/LabBook.org" org-agenda-files)
(push "~/Projects/hppsimulations/WORKING_DOC/pma.org" org-agenda-files)
(push "~/Projects/hppsimulations/newpma/newpma.org" org-agenda-files)

(push "~/Copy/Projects/ParVoronoi-wiki/graphprocessing.org" org-agenda-files)

#+end_src

*** TODO Google agenda                                     :ARNAUD:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
How does he exports its google agenda to org?
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("~/org/liste.org" "~/org/google.org")))
(setq revert-without-query (quote ("google.org")))
#+END_SRC

** Org-id for storing objects ???                           :ARNAUD:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(setq org-id-method (quote uuidgen))
#+END_SRC

** Setting "Wrap at window edge" for .org mode:                :WEB:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
 (global-visual-line-mode t)
#+END_SRC

[16:32:35; 24.04.2013]

** Heading is DONE when all checkboxes are checked:                     :WEB:
Mark heading done when all checkboxes are checked.

An item consists of a list with checkboxes. When all of the checkboxes
are checked, the item should be considered complete and its TODO state
should be automatically changed to DONE. The code below does
that. This version is slightly enhanced over the one in the mailing
list (see
[[http://thread.gmane.org/gmane.emacs.orgmode/42715/focus=42721]]) to
reset the state back to TODO if a checkbox is unchecked.

Note that the code requires that a checkbox statistics cookie (the [/]
or [%] thingie in the headline - see the Checkboxes section in the
manual) be present in order for it to work. Note also that it is too
dumb to figure out whether the item has a TODO state in the first
place: if there is a statistics cookie, a TODO/DONE state will be
added willy-nilly any time that the statistics cookie is changed.

#+BEGIN_SRC emacs-lisp
;; see http://thread.gmane.org/gmane.emacs.orgmode/42715
(eval-after-load 'org-list
  '(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete)))

(defun ndk/checkbox-list-complete ()
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
            (if (match-end 1)
                (if (equal (match-string 1) "100%")
                    ;; all done - do the state change
                    (org-todo 'done)
                  (org-todo 'todo))
              (if (and (> (match-end 2) (match-beginning 2))
                       (equal (match-string 2) (match-string 3)))
                  (org-todo 'done)
                (org-todo 'todo)))))))
#+END_SRC

[16:27:59; 24.04.2013]

** Clocking work                                                     :JULIO:
Put clock log into a drawer
#+BEGIN_SRC emacs-lisp
(setq org-clock-into-drawer t)
#+END_SRC

** TODO Link to attachment files                                      :JULIO:
https://lists.gnu.org/archive/html/emacs-orgmode/2008-11/msg00108.html

TO FIX: org-attach-expand-link is only defined after we do =C-c C-a=
(open the attachment options buffers) . 
#+BEGIN_SRC emacs-lisp
(eval-after-load 'ord-attach 
  (setq org-link-abbrev-alist '(("att" . org-attach-expand-link))))
#+END_SRC

#+RESULTS:

** Inline tasks                                                      :JULIO:
#+begin_src emacs-lisp
(require 'org-inlinetask)
#+end_src
** Ditaa                                                  :JULIO:
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/bin/ditaa")
#+end_src
* Org-mode shortcuts
** Adding date with brackets with command "C-c d":                     :LUKA:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'insert-date)
(defun insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "** %Y-%m-%d")
                   ((equal prefix '(4)) "[%Y-%m-%d]"))))
      (insert (format-time-string format))))
#+END_SRC
[16:34:01; 24.04.2013]

** Adding date with command "C-c t":                                   :LUKA:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") 'insert-time-date)
(defun insert-time-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
   two prefix arguments, write out the day and month name."
    (interactive "P")
    (let ((format (cond
                   ((not prefix) "[%H:%M:%S; %d.%m.%Y]")
                   ((equal prefix '(4)) "[%H:%M:%S; %Y-%m-%d]"))))
      (insert (format-time-string format))))
#+END_SRC
[16:34:15; 24.04.2013]

** Fix view TODO tree:                                        :LUKA:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c v") 'org-show-todo-tree)
#+END_SRC
[16:34:40; 24.04.2013]
** Org-store-link:                                                   :ARNAUD:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
[16:35:48; 24.04.2013]

** Adding shortcut for interactively inserting git link:               :LUKA:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c g") 'org-git-insert-link-interactively)
#+END_SRC
[16:36:31; 24.04.2013]

** Adding shortcut for data entry:                            :LUKA:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no 
:END:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") (lambda ()
                  (interactive)
		  (insert "** data#\n*** git:\n#+begin_src sh\ngit log -1\n#+end_src\n*** Notes:" )))
		  ;;(insert "** data#\n[[shell:git log -1][git]]\n" )))
                  ;;(insert "** data#\n[[shell:git log -1][git]]\n" (format-time-string "[%H:%M:%S; %d.%m.%Y]" ))))
#+END_SRC
[16:36:15; 24.04.2013]

** Navigating through org-mode:
Additional shortcuts for navigating through org-mode documents:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c <up>") 'outline-up-heading)
(global-set-key (kbd "C-c <left>") 'outline-previous-visible-heading)
(global-set-key (kbd "C-c <right>") 'outline-next-visible-heading)
#+END_SRC
[18:01:07; 27.05.2013]

** Narrowing
Convenient built-in shortcuts.
#+BEGIN_EXAMPLE
C-x n s     (org-narrow-to-subtree)
    Narrow buffer to current subtree.
C-x n b     (org-narrow-to-block)
    Narrow buffer to current block.
C-x n w     (widen)
    Widen buffer to remove narrowing.

C-c C-x b     (org-tree-to-indirect-buffer)
    Show current tree in an indirect buffer 
#+END_EXAMPLE

*** Narrow region to indirect buffer                                :JULIO:
The "indirect buffer" lets you have two different views of the same
file.

http://demonastery.org/2013/04/emacs-narrow-to-region-indirect/

#+begin_src emacs-lisp
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (deactivate-mark)
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))
#+end_src

** Navigating through org-sparse-tree                                :JULIO:
Next and previous occurence on the sparse tree
#+BEGIN_SRC emacs-lisp
;(global-set-key (kbd "C-x <dead-grave>") 'next-error)
;(global-set-key (kbd "C-x <S-dead-tilde>") 'previous-error)

(global-set-key (kbd "M-n") 'next-error)
(global-set-key (kbd "M-p") 'previous-error)
#+END_SRC

* Org-mode + babel:
** Seamless use of babel (no confirmation, lazy export)             :ARNAUD:
:PROPERTIES:
:END:
#+BEGIN_SRC emacs-lisp
(setq org-export-babel-evaluate nil)
(setq org-confirm-babel-evaluate nil)
#+END_SRC
** Some initial languages we want org-babel to support:              :ARNAUD:
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (C . t)
     (sh . t)
     (python . t)
     (R . t)
     (ruby . t)
     (ocaml . t)
     (ditaa . t)
     (dot . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     (screen . t)
     (plantuml . t)
     (lilypond . t)
     (org . t)
     (makefile . t)
     (latex . t)
     ))
  (setq org-src-preserve-indentation t)
#+END_SRC

** Adding source code blocks:                                          :LUKA:
*** With capital letters:
To use this type <S and then TAB
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("S" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>"))
#+END_SRC

*** Emacs-elisp code:
To use this type <m and then TAB
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))
#+END_SRC

*** R code:
To use this type <r and then TAB
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("r" "#+begin_src R :results output :session :exports both\n?\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

To use this type <R and then TAB
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("R" "#+begin_src R :results output graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session\n?\n#+end_src" "<src lang=\"R\">\n\n</src>"))
#+END_SRC

*** Python code:
To use this type <p and then TAB
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("p" "#+begin_src python :results output :exports both\n?\n#+end_src" "<src lang=\"python\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("P" "#+begin_src python :results output :exports both :session\n?\n#+end_src" "<src lang=\"python\">\n\n</src>"))
#+END_SRC

https://github.com/gregsexton/ob-ipython#tips-and-tricks
Ipython must have a :session argument
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("ip" "#+begin_src ipython :exports both :session\n?\n#+end_src" "<src lang=\"ipython\">\n\n</src>"))

(add-to-list 'org-structure-template-alist
        '("IP" "#+begin_src ipython :exports both :session ?\n\n#+end_src" "<src lang=\"ipython\">\n\n</src>"))
#+END_SRC

*** Bash "sh" code:
To use this type <b and then TAB
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("b" "#+begin_src sh :results output :exports both\n?\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
#+END_SRC

To use this type <B and then TAB. This comes with a session argument
(e.g., in case you want to keep ssh connexions open).
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
        '("B" "#+begin_src sh :session ? :results output :exports both \n\n#+end_src" "<src lang=\"sh\">\n\n</src>"))
#+END_SRC


[18:23:44; 21.06.2013]

*** C/C++ code:                                                       :JULIO:

C++ 11 
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("CPP" "#+begin_src C++ :flags -std=c++11 :includes <iostream> \n\n#+end_src" "<src lang=\"c++\">\n\n</src>"))
#+end_src 

C 
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("C" "#+begin_src C :includes <stdio.h> \n\n#+end_src" "<src lang=\"c\">\n\n</src>"))
#+end_src 

** Evaluating whole subtree:                                           :LUKA:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c S-t") 'org-babel-execute-subtree)
#+END_SRC

[15:25:16; 17.12.2013]
** Display images                                                    :ARNAUD:
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-babel-result-hide-all)
#+END_SRC
** TODO Ipython configuration                                         :JULIO:
*** Use python3
:PROPERTIES:
:END:

for having python3 sessions.  
#+begin_src emacs-lisp
(setq python-shell-interpreter "python3")
#+end_src

For executing wihtout session this is enough
#+begin_src emacs-lisp
(setq org-babel-python-command "python3")
#+end_src

*** Old Ipython configuration                                     :ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
For now I just use this simple configuration explain here:
http://permalink.gmane.org/gmane.emacs.orgmode/79488

A better solution should do something like this
https://github.com/gregsexton/ob-ipython

For having ipython sessions.  
#+begin_src emacs-lisp
 (setq python-shell-interpreter "python3"
        ;; org mode seems to work better with classic mode. . .
        python-shell-interpreter-args "--classic --no-banner"
        python-shell-completion-setup-code
        "from IPython.core.completerlib import module_completion"
        python-shell-completion-module-string-code
        "';'.join(module_completion('''%s'''))\n"
        python-shell-completion-string-code
        "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")

#+end_src

For executing wihtout session this is enough
#+begin_src emacs-lisp
(setq org-babel-python-command "python3 --no-banner --classic --no-confirm-exit")
#+end_src

*** Ipython Babel evaluation

https://github.com/gregsexton/ob-ipython

#+begin_src emacs-lisp
(require 'ob-ipython)
#+end_src

Solve bug "Searching for program: no such file or directory, ipython"
https://github.com/gregsexton/ob-ipython/issues/52
#+begin_src emacs-lisp
(setq exec-path (append '("/home/julio/anaconda3/bin") exec-path))
#+end_src


** Noweb evaluation                                                  :JULIO:
use fast name resolution of noweb reference .  
#+begin_src emacs-lisp
(setq org-babel-use-quick-and-dirty-noweb-expansion t)
#+end_src

* Org-mode + bibtex
:PROPERTIES:
:END:
** Org-ref configuration
https://github.com/jkitchin/org-ref

#+begin_src emacs-lisp
(require 'org-ref)
(setq reftex-default-bibliography '("~/Documents/Mendeley/library.bib"))
#+end_src

#+RESULTS:
| ~/Documents/Mendeley/library.bib |

#+begin_src emacs-lisp
(setq 
 ;org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
 org-ref-default-bibliography '("~/Documents/Mendeley/library.bib")
 ;org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/"
 )
#+end_src

#+RESULTS:
| ~/Documents/Mendeley/library.bib |

** TODO Helm-bibtex configuration                                     :JULIO:
  https://github.com/tmalsburg/helm-bibtex
  - [ ] find a way to automatically load helm-bibtex. Currently for
    the links to work we have to manually call M-x helm-bibtex once to
    load the library.
    
*** Basic setup of helm-bibtex
:LOGBOOK:  
- Note taken on [2016-05-06 Sex 11:24] \\
  Updated configuration to new version of HELM
:END:      
:END:

Set the path to bibtex library.
#+BEGIN_SRC emacs-lisp
;; Sets the path to my bibtex file (which is generated by Mendeley) 
(setq bibtex-completion-bibliography '("~/Documents/Mendeley/library.bib"))

;; Configure the field on the bibtex that contains the path to the pdf file.
(setq bibtex-completion-pdf-field "file")
#+END_SRC

#+RESULTS:
: file

*** TODO Helm key-bindings
:PROPERTIES:
:END:
Doesn't work... I wanted to replace the reftex shortcut
#+begin_src emacs-lisp
;;Search bibtex
;;(global-set-key (kbd "C-c C-x [") 'helm-bibtex)
#+end_src

#+RESULTS:
: helm-bibtex

*** Fix the helm function to find the pdf in field                :ARCHIVE:
:LOGBOOK:  
- Note taken on [2016-05-06 Sex 13:20] \\
  After the new version of helm-bibtex this fix is no more needed.
:END:      
:PROPERTIES:
:header-args: :tangle no
:END:
Last two lines were modified to match the syntax of the /file/ field of
the bibtex generated by Mendeley. 

#+BEGIN_SRC emacs-lisp
(eval-after-load "helm-bibtex" 
'(defun helm-bibtex-find-pdf-in-field (key-or-entry)
    "Returns the path of the PDF specified in the field
`helm-bibtex-pdf-field' if that file exists.  Returns nil if no
file is specified, or if the specified file does not exist, or if
`helm-bibtex-pdf-field' is nil."

    (when helm-bibtex-pdf-field
      (let* ((entry (if (stringp key-or-entry)
			(helm-bibtex-get-entry1 key-or-entry t)
		      key-or-entry))
	     (value (helm-bibtex-get-value helm-bibtex-pdf-field entry)))
	(cond
	 ((not value) nil)         ; Field not defined.
	 ((f-file? value) value)   ; A bare path was found.
	 (t				; Assuming Zotero/Mendeley/JabRef format:
	  (cl-loop  ; Looping over the files:
	   for record in (s-split ";" value)
	   for record = (s-split ":" record)
	   for file-name = (nth 0 record)
	   for path = (nth 1 record)
	   if (f-file? path)
	   collect (f-full path)
	   else if (f-file? (f-full (f-join path file-name)))
	   collect (f-full (f-join path file-name))
	   ;; This is to work around a bug in Mendeley.
	   else if (f-file? (concat "/" path))
	   collect ( concat "/" path))))))))

#+END_SRC

#+RESULTS:

*** DONE Use Mendeley as default pdfviewer with helm
:LOGBOOK:
- Note taken on [2015-11-26 jeu. 14:40] \\
  The problem is shows up when I add the (require 'helm-bibtex)
- Note taken on [2015-11-26 jeu. 14:27] \\
  This setup is givin me some error on startup of emacs. 
  "wrong-type-argument keymapp nil"
:END:
:PROPERTIES:
:END:
this is the "<f2>" shortcut on helm-bibtex
#+BEGIN_SRC emacs-lisp
;;(require 'helm-bibtex)
;;(setq helm-bibtex-pdf-open-function
;;      (lambda (fpath)
;;	(start-process "mendeleydesktop" "*helm-bibtex-mendeleydesktop*" "/usr/bin/mendeleydesktop" fpath)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;(require 'helm-bibtex)
(setq bibtex-completion-pdf-open-function
      (lambda (fpath)
	(call-process "mendeleydesktop" nil 0 nil fpath)))
#+END_SRC

#+RESULTS:
| lambda | (fpath) | (start-process mendeleydesktop *helm-bibtex-mendeleydesktop* /usr/bin/mendeleydesktop fpath) |

*** Insert org-mode citation as a link to the pdf file            :ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
This is the <f3> shortcut on helm-bibitex.

#+BEGIN_SRC emacs-lisp
(setq helm-bibtex-format-citation-functions
      '((org-mode      . helm-bibtex-format-citation-org-link-to-PDF)
	      (latex-mode    . helm-bibtex-format-citation-cite)
	      (markdown-mode . helm-bibtex-format-citation-pandoc-citeproc)
	      (default       . helm-bibtex-format-citation-default)))
#+END_SRC

*** Insert org-mode citation as a new custom link type
:PROPERTIES:
:END:
This is the <f1> shortcut on helm-bibitex.
**** Create a custom link type [[BIB::key]]
http://orgmode.org/manual/Adding-hyperlink-types.html#Adding-hyperlink-types

Convert a link type BIB:Toss2014 to \cite{Toss2014} on the pdf exporter. 
https://lists.gnu.org/archive/html/emacs-orgmode/2010-12/msg00629.html

#+BEGIN_SRC emacs-lisp 
(require 'org)
(org-add-link-type "BIB" 'org-bib-open 
(lambda (path desc format)
  (cond
   ((eq format 'latex)
    (format "\\cite{%s}" path))))) 

;;(add-hook 'org-store-link-functions 'org-bib-store-link)

(defun org-bib-open (path)
  "Uses the helm functions to look up the path on the bibtex."
  (funcall bibtex-completion-pdf-open-function (nth 0 (bibtex-completion-find-pdf-in-field path ))))

#+END_SRC

#+RESULTS:
: org-bib-open

**** Configure helm-bibtex to insert our new kind of link as citation

#+BEGIN_SRC emacs-lisp
(defun bibtex-completion-format-citation-BIB (keys)
  "Formatter for BIB references."
  (s-join ", "
          (--map (format "BIB:%s" it) keys)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq bibtex-completion-format-citation-functions
      '((org-mode      . bibtex-completion-format-citation-BIB)
	      (latex-mode    . bibtex-completion-format-citation-cite)
	      (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
	      (default       . bibtex-completion-format-citation-default)))
#+END_SRC

* Org-mode LaTeX export
:PROPERTIES:
:END:
** Clear default values                                      :JULIO:ARCHIVE:
:PROPERTIES:
:header-args: :tangle no
:END:
To remove the default headers added on the latex export.
#+begin_src emacs-lisp
(unless (boundp 'org-latex-classes) (setq org-latex-classes nil))
#+end_src

** ACM                                                              :ARNAUD:
#+BEGIN_SRC emacs-lisp
 ;; Clear the default values for this class
 ;; (unless (boundp 'org-latex-classes) (setq org-latex-classes nil))

 (add-to-list 'org-latex-classes '("acm-proc-article-sp" "\\documentclass{acm_proc_article-sp}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(setq org-latex-to-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f ; bibtex `basename %f | sed 's/\.tex//'` ; pdflatex -interaction nonstopmode -output-directory  %o %f ; pdflatex -interaction nonstopmode -output-directory %o %f"))

;(setq org-latex-to-pdf-process '("bibtex `basename %f | sed 's/\.tex//'`"))


#+END_SRC

#+RESULTS:
| pdflatex -interaction nonstopmode -output-directory %o %f ; bibtex `basename %f | sed 's/.tex//'` ; pdflatex -interaction nonstopmode -output-directory  %o %f ; pdflatex -interaction nonstopmode -output-directory %o %f |

*** General articles                                         :LUKA:ARCHIVE:
:LOGBOOK:  
- Note taken on [2016-03-14 lun. 12:49] \\
  let the emacs defaults for article class
:END:      
:PROPERTIES:
:header-args: :tangle no
:END:      
I'm not completely sure I need this. I could probably remove it...
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes '("article" "\\documentclass{article}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

[15:18:27; 16.05.2013]

** Beamer
https://gitlab.com/yuvallanger/worg/blob/ed18772a5015bee9159d55459bbfee4bda669414/exporters/beamer/ox-beamer.org
#+begin_src emacs-lisp
(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass\[presentation\]\{beamer\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+end_src 

* Org-mode for github
** toc-org
[[https://github.com/snosov1/toc-org][toc-org]] helps you to have an up-to-date table of contents in org files
without exporting (useful primarily for readme files on GitHub).
#+BEGIN_SRC emacs-lisp
(if (require 'toc-org nil t)
    (add-hook 'org-mode-hook 'toc-org-enable)
  (warn "toc-org not found"))
#+END_SRC
Now, every time I save an org file, the first headline with a :TOC:
tag will be updated with the current table of contents.
* Remote file editing-TRAMP:                                            :WEB:
This is installed by default for most of emacs Remote File Editing
Using Emacs

Emacs has a package called TRAMP (Transparent Remote (file) Access,
Multiple Protocol) which allows you to edit files on remote machines
via SSH. Since Emacs 22, TRAMP is included with the distribution.

All you need to do is add the following lines to your .emacs file,

#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "ssh")
#+END_SRC

Then in order to open a file on a remote machine, you can use,

C-x C-f /user@your.host.com:/path/to/file

If you don't want to enter your password every time you open or save a
file consider using Public Key Authentication.

TRAMP mode can also be used to edit files on the same machine as
another user, if you want to open some file as root you can use,

    C-x C-f /root@127.0.0.1:/path/to/file

[12:25:12; 13.06.2013]
* Custom-set-variables                                                :JULIO:
Copy of the old configuration on my init.el that emacs put
automatically.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tango-dark)))
 '(display-buffer-alist nil)
 '(markdown-command "pandoc")
'(org-html-postamble-format (quote (("en" "<p class=\"author\">Author: %a (%e)</p>
<p class=\"date\">Date: %d</p>")))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC
